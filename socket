import json



import subprocess



import socket



import time

host = '3.92.160.2'

#####################################

def execute_shell_command_timeout(shell_command, timeout):



    command_response = subprocess.Popen(shell_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)



    for t in xrange(timeout):



        if command_response.poll() is not None:



            return command_response.communicate()



        time.sleep(1)



    command_response.kill()



    return "killed", "killed by timeout"









def get_values_from_json():

    jsonString = open('json_kafka.json', 'r')

    dict_from_json = json.load(jsonString)

    for primaryKey in dict_from_json:

        if primaryKey.startswith("ls-"):

            newPrimaryKey = "{0}-v1".format(primaryKey)

            shipper_port = dict_from_json[primaryKey]["ShipperPort"]

            if shipper_port == "":

                continue

            shipper_port = int(shipper_port) 

            UDPorTCP = dict_from_json[primaryKey]["UDP_OR_TCP"]

            kafka_msg = "echo sth"



            #kafka_msg = "ping blabla.com"





            try:



                out, err = execute_shell_command_timeout(kafka_msg,5)



                print out, err

                data = json.loads(out)

                for key in data.keys():

                    if key == "ship_hostname" :

                        data.pop('ship_hostname')

                    if key == "@version" :

                        data.pop('@version')

                    if key == "ship_time" :

                        data.pop('ship_time')



                data_string = json.dumps(data)

                print data_string



            except Exception as e:



                print (e)



            try:

                if UDPorTCP == "UDP":

                    TCP_UDP=socket.SOCK_DGRAM

                    tcp_con = 0

                    print "UDP"

                elif UDPorTCP == "TCP":

                    TCP_UDP=socket.SOCK_STREAM

                    tcp_con = 1

                    print "TCP"

                else:

                    TCP_UDP=socket.SOCK_STREAM

                    tcp_con = 2

                    print "TCP"

                s = socket.socket(socket.AF_INET, TCP_UDP)

                print "using socket module"

                s.connect((host, shipper_port))

                print "connecting host withy port"

                s.send(json.load(data.encode('utf-8')))

                print "sending the data"

                if tcp_con:

                    s.close()

            except Exception as e:

                print (e)

                s.close()





def main():



    get_values_from_json()







main()

